name: build-docker-jn-web

on:
  workflow_dispatch:

  #pull_request:
  #  branches: [dev, main]
  #push:
  #  branches: [dev, main]

jobs:
  build-container:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: echo branch name
        run: echo >> Current branch is ${{ steps.extract_branch.outputs.branch }}

      - name: Configure AWS dev credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ steps.extract_branch.outputs.branch =='develop' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1
          role-session-name: GitActionsConfigCredentials

      - name: Configure AWS prod credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ steps.extract_branch.outputs.branch =='main' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
          role-session-name: GitActionsConfigCredentials

      - name: Add dev profile credentials to ~/.aws/credentials
        if: ${{ steps.extract_branch.outputs.branch =='develop' }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_DEV }} --profile orcamento-express-dev
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }} --profile orcamento-express-dev
      
      - name: Add prod profile credentials to ~/.aws/credentials
        if: ${{ steps.extract_branch.outputs.branch =='main' }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_PROD }} --profile orcamento-express-prod
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }} --profile orcamento-express-prod

      # - name: Build the docker image from production
      #   working-directory: ./
      #   if: ${{ steps.extract_branch.outputs.branch =='main' }}
      #   run: docker build --build-arg REACT_APP_WEB_API=https://jnmoveis.com.br/api --build-arg NODE_ENV=development -f Dockerfile.front -t albuquerquedev/front-orcamento-express:prod .

      # - name: Build the docker image from develop 
      #   working-directory: ./
      #   if: ${{ steps.extract_branch.outputs.branch =='develop' }}
      #   run: docker build --build-arg REACT_APP_WEB_API=https://jnmoveis.com.br/api --build-arg NODE_ENV=development -f Dockerfile.front -t albuquerquedev/front-orcamento-express:dev .
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWD }}

      # - name: Push dev image to Docker Hub
      #   if: ${{ steps.extract_branch.outputs.branch =='develop' }}
      #   run: docker push albuquerquedev/front-orcamento-express:dev
      
      # - name: Push prod image to Docker Hub
      #   if: ${{ steps.extract_branch.outputs.branch =='main' }}
      #   run: docker push albuquerquedev/front-orcamento-express:prod

      - name: Check out my other private repo
        uses: actions/checkout@main
        with:
          repository: Albuquerquess/jn-infra
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.1.8


      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      
      - name: generate terraform dev env files
        if: ${{ steps.extract_branch.outputs.branch =='develop' }}
        run: printf '
            aws_default_tags                = { "name" = "JN - Express Budget" }\n
            aws_access_key_id              = "${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"\n
            aws_secret_access_key          = "${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"\n
            aws_profile                    = "orcamento-express-dev"\n
            aws_region                     = "us-east-1"\n
            aws_ami                        = "ami-04505e74c0741db8d"\n
            aws_instance_type              = "t2.micro"\n
            aws_subnet_public_cidr_block   = "10.0.1.0/24"\n
            aws_subnet_private_cidr_block  = "10.0.2.0/24"\n
            aws_vpc_cird_block             = "10.0.0.0/16"\n
            aws_vpc_enable_dns_hostnames   = "true"\n
            subnet_map_public_ip_on_launch = "true"\n
            destination_cidr_block         = "0.0.0.0/0"\n
            aws_vpc_instance_tenancy       = "default"\n
            aws_vpc_enable_dns_support     = "true"\n
            aws_subnet_availability_zone   = "us-east-1a"\n' > dev.tfvars

      - name: generate terraform prod env files
        if: ${{ steps.extract_branch.outputs.branch =='main' }}
        run: printf '
            aws_default_tags              = { "name" = "JN - Express Budget" }\n
            aws_access_key_id              = "${{ secrets.AWS_ACCESS_KEY_ID_PROD }}"\n
            aws_secret_access_key          = "${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}"\n
            aws_profile                    = "orcamento-express-prod"\n
            aws_region                     = "us-east-1"\n
            aws_ami                        = "ami-04505e74c0741db8d"\n
            aws_instance_type              = "t2.micro"\n
            aws_subnet_public_cidr_block   = "10.0.1.0/24"\n
            aws_subnet_private_cidr_block  = "10.0.2.0/24"\n
            aws_vpc_cird_block             = "10.0.0.0/16"\n
            aws_vpc_enable_dns_hostnames   = "true"\n
            subnet_map_public_ip_on_launch = "true"\n
            destination_cidr_block         = "0.0.0.0/0"\n
            aws_vpc_instance_tenancy       = "default"\n
            aws_vpc_enable_dns_support     = "true"\n
            aws_subnet_availability_zone   = "us-east-1a"\n' > prod.tfvars

      - name: Terraform Init dev
        id: init-dev
        run: terraform init -backend=true -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" -backend-config="region=us-east-1" -backend-config="bucket=jn-s3-terraform-state" -backend-config="key=dev/tfstate/terraform.tfstate"
        if: ${{ steps.extract_branch.outputs.branch =='develop' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Init prod
        id: init-prod
        run: terraform init -backend=true -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" -backend-config="region=us-east-1" -backend-config="bucket=jn-s3-terraform-state" -backend-config="key=prod/tfstate/terraform.tfstate"
        if: ${{ steps.extract_branch.outputs.branch =='main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: set dev terraform workspace
        if: ${{ steps.extract_branch.outputs.branch =='develop' }}
        run: terraform workspace select dev || terraform workspace new dev
        env:
          SOURCE_DIR: '.'
          AWS_REGION: 'us-east-1'
          AWS_S3_BUCKET: 'jn-s3-terraform-state'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
      
      - name: set prod terraform workspace
        if: ${{ steps.extract_branch.outputs.branch =='main' }}
        run: terraform workspace select prod || terraform workspace new prod
        env:
          SOURCE_DIR: '.'
          AWS_REGION: 'us-east-1'
          AWS_S3_BUCKET: 'jn-s3-terraform-state'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
      
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform dev Plan
        id: plan-dev
        run: terraform plan -no-color -input=false -var-file=dev.tfvars -out=dev.out
        if: ${{ steps.extract_branch.outputs.branch =='develop' }}
        continue-on-error: true

      - name: Terraform prod Plan
        id: plan-prod
        run: terraform plan -no-color -input=false -var-file=prod.tfvars -out=prod.out
        if: ${{ steps.extract_branch.outputs.branch =='main' }}
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply Dev
        run: terraform apply -auto-approve -input=false dev.out
        if: ${{ steps.extract_branch.outputs.branch =='develop' }}
        env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              TF_ACTION_WORKING_DIR: '.'
              AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
              AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}

      - name: Terraform Apply Prod
        run: terraform apply -auto-approve -input=false prod.out
        if: ${{ steps.extract_branch.outputs.branch =='main' }}
        env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              TF_ACTION_WORKING_DIR: '.'
              AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
              AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

      - name: ls
        run: ls -la

      - name: ls back
        run: ls -la ..

      - name: Sync S3 dev
        uses: jakejarvis/s3-sync-action@master
        if: ${{ steps.extract_branch.outputs.branch =='develop' }}
        env:
          AWS_REGION: 'us-east-1'
          AWS_S3_BUCKET: 'jn-s3-terraform-state'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          DEST_DIR: "dev/tfstate/"
      
      - name: Sync S3 prod
        uses: jakejarvis/s3-sync-action@master
        if: ${{ steps.extract_branch.outputs.branch =='main' }}
        env:
          AWS_REGION: 'us-east-1'
          AWS_S3_BUCKET: 'jn-s3-terraform-state'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          DEST_DIR: "prod/tfstate/"

